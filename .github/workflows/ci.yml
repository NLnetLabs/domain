name: ci
# Don't run on push as well as pull_request otherwise the jobs will be run
# twice [1]. Run on pull_request instead of push as otherwise code is not
# built & tested against the PR target branch as if it were already merged
# (thus hiding issues until post-merge).
# [1]: https://github.com/orgs/community/discussions/26940
on: pull_request
jobs:
  test:
    name: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [1.79.0, stable, beta, nightly]
    env:
        RUSTFLAGS: "-D warnings"
        DOMAIN_FEATURES: "--all-features"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v1
    - name: Install Rust
      uses: hecrj/setup-rust-action@v2
      with:
        rust-version: ${{ matrix.rust }}
    - if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y libssl-dev
    - if: matrix.os == 'windows-latest'
      name: Disable OpenSSL on Windows CI
      shell: bash
      run: |
        # Cargo doesn't support enabling all but one feature, so determine the
        # complete feature list and filter out 'openssl'.
        features=`cargo metadata --no-deps --format-version 1 | jq -r '.packages[]|select(.name == "domain")|.features|keys|map(select(.!="openssl"))|join(",")'`
        # Overwrite the 'DOMAIN_FEATURES' environment variable.
        echo "DOMAIN_FEATURES=-F $features" >> "$GITHUB_ENV"
        # See <https://github.com/actions/runner-images/issues/12432>
        mkdir -p .cargo
        printf '[target.x86_64-pc-windows-msvc]\nlinker = "rust-lld"\n' >> .cargo/config.toml
    - if: matrix.rust == 'stable'
      run: rustup component add clippy
    - if: matrix.rust == 'stable'
      run: cargo clippy $DOMAIN_FEATURES --all-targets -- -D warnings
      shell: bash
    - if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check
    - run: cargo check --no-default-features --all-targets
    - run: cargo test $DOMAIN_FEATURES
      shell: bash

  minimal-versions:
    name: Check minimal versions
    runs-on: ubuntu-latest
    env:
        RUSTFLAGS: "-D warnings"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v1
    - name: Install Rust
      uses: hecrj/setup-rust-action@v2
      with:
        rust-version: "1.79.0"
    - name: Install OpenSSL
      run: sudo apt-get install -y libssl-dev
    - name: Install nightly Rust
      run: rustup install nightly
    - name: Check with minimal-versions
      run: |
        cargo +nightly update -Z minimal-versions
        cargo check --all-features --all-targets --locked

  # Note: This deliberately doesn't try to run the examples as some of them
  # don't terminate and/or attempt to make network connections that will fail
  # or perhaps be a nuisance to real name servers if run regularly by CI.
  #
  # Note: This is just a band aid, ideally there would be a way for Cargo to
  # build/run examples using the feature set specified in Cargo.toml itself,
  # but that isn't currently possible (see [1]).
  # 
  # [1]: https://github.com/rust-lang/cargo/issues/4663)
  build-examples:
    name: Build examples
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [1.79.0, stable, beta, nightly]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v1
    - name: Install Rust
      uses: hecrj/setup-rust-action@v2
      with:
        rust-version: ${{ matrix.rust }}
    - name: Compile all examples
      shell: bash
      # TODO: Emit matrix elements based on inspecting Cargo.toml so that
      # each example runs as its own GitHub Actions step/job?
      run: |
        # Generate the set of cargo check --example X --features Y commands to
        # run and store them in a temporary script. This command works by
        # extracting the example blocks from the Cargo.toml file and the set
        # of features that the block indicates are needed to run the example.
        # E.g. given this block in Cargo.toml:
        # 
        #   [[example]]
        #   name = "lookup"
        #   required-features = ["resolv"]
        #
        # It outputs a line that looks like this:
        #
        #   cargo check --example lookup --features resolv
        #
        # One line per example is output and the set of lines directed to a temporary
        # shell script file which is then run in the next step.

        cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].targets[] | select(.kind[] | contains("example")) | "cargo check --example \(.name) --features \(."required-features" | flatten | join(","))"' > ${{ runner.temp }}/check-examples.sh

        # Run the temporary script:

        bash -x -e ${{ runner.temp }}/check-examples.sh
